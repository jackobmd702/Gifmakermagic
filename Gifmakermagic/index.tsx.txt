/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
import {GoogleGenAI} from '@google/genai';
import {applyPalette, GIFEncoder, quantize} from 'gifenc';

const ai = new GoogleGenAI({apiKey: process.env.API_KEY});
const fps = 4;
const numFrames = 10;

// --- App Constants ---
const COST_PER_GENERATION = 10;
const INITIAL_CREDITS = 100;
const FREE_CREDITS_AMOUNT = 50;
const RETRY_COUNT = 3;

// --- DOM elements ---
const promptInput = document.getElementById('prompt-input') as HTMLInputElement;
const generateButton = document.getElementById(
  'generate-button',
) as HTMLButtonElement;
const generateButtonText = document.getElementById(
  'generate-button-text',
) as HTMLSpanElement;
const framesContainer = document.getElementById(
  'frames-container',
) as HTMLDivElement;
const resultContainer = document.getElementById(
  'result-container',
) as HTMLDivElement;
const statusDisplay = document.getElementById(
  'status-display',
) as HTMLDivElement;
const generationContainer = document.querySelector(
  '.generation-container',
) as HTMLDivElement;
const tabButtons = document.querySelectorAll('.tab-button');
const tabContents = document.querySelectorAll('.tab-content');
const creditBalanceElement = document.getElementById(
  'credit-balance',
) as HTMLSpanElement;
const getCreditsButton = document.getElementById(
  'get-credits-button',
) as HTMLButtonElement;
const currencyWidget = document.getElementById(
  'currency-widget',
) as HTMLDivElement;

// --- Currency Management ---
const creditManager = {
  get: (): number => {
    const credits = localStorage.getItem('magicCredits');
    if (credits === null) {
      localStorage.setItem('magicCredits', String(INITIAL_CREDITS));
      return INITIAL_CREDITS;
    }
    return parseInt(credits, 10);
  },
  set: (amount: number): void => {
    localStorage.setItem('magicCredits', String(amount));
    updateUI();
  },
  spend: (amount: number): boolean => {
    const current = creditManager.get();
    if (current >= amount) {
      creditManager.set(current - amount);
      return true;
    }
    return false;
  },
  add: (amount: number): void => {
    const current = creditManager.get();
    creditManager.set(current + amount);
  },
};

async function createGifFromPngs(
  imageUrls: string[],
  targetWidth = 1024,
  targetHeight = 1024,
) {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  if (!ctx) {
    throw new Error('Failed to create canvas context');
  }
  const gif = GIFEncoder();
  const fpsInterval = 1 / fps;
  const delay = fpsInterval * 1000;

  for (const url of imageUrls) {
    const img = new Image();
    img.src = url;
    await new Promise((resolve) => {
      img.onload = resolve;
    });
    canvas.width = targetWidth;
    canvas.height = targetHeight;
    ctx.fillStyle = '#ffffff';
    ctx.clearRect(0, 0, targetWidth, targetHeight);
    ctx.drawImage(img, 0, 0, targetWidth, targetHeight);
    const data = ctx.getImageData(0, 0, targetWidth, targetHeight).data;
    const format = 'rgb444';
    const palette = quantize(data, 256, {format});
    const index = applyPalette(data, palette, format);
    gif.writeFrame(index, targetWidth, targetHeight, {palette, delay});
  }

  gif.finish();
  const buffer = gif.bytesView();
  const blob = new Blob([buffer], {type: 'image/gif'});
  const url = URL.createObjectURL(blob);
  const img = new Image();
  img.src = url;
  return img;
}

function updateStatus(message: string) {
  if (statusDisplay) {
    statusDisplay.textContent = message;
  }
}

function updateUI() {
  const credits = creditManager.get();
  if (creditBalanceElement) {
    creditBalanceElement.textContent = String(credits);
  }

  if (generateButtonText) {
    generateButtonText.textContent = `Generate (${COST_PER_GENERATION} Credits)`;
  }

  if (generateButton) {
    const isLoading = generateButton.classList.contains('loading');
    const hasEnoughCredits = credits >= COST_PER_GENERATION;
    generateButton.disabled = isLoading || !hasEnoughCredits;

    if (!isLoading && !hasEnoughCredits) {
      updateStatus(
        `Not enough credits. Click 'Get More' to top up!`,
      );
    }
  }
}

function switchTab(targetTab: string) {
  tabButtons.forEach((button) => {
    button.classList.toggle('active', button.getAttribute('data-tab') === targetTab);
  });
  tabContents.forEach((content) => {
    content.classList.toggle('active', content.id === `${targetTab}-content`);
  });
  if (targetTab === 'output' && resultContainer) {
    resultContainer.style.display = 'flex';
  }
}

async function run(value: string) {
  if (framesContainer) framesContainer.textContent = '';
  if (resultContainer) resultContainer.textContent = '';
  resultContainer?.classList.remove('appear');
  switchTab('frames');
  if (resultContainer) resultContainer.style.display = 'none';

  generateButton.disabled = true;
  generateButton.classList.add('loading');
  updateStatus('Expanding your creative idea...');

  try {
    const expandPromptResponse = await ai.models.generateContent({
      model: 'gemini-2.5-flash-preview-04-17',
      contents: value,
      config: {
        temperature: 1,
        systemInstruction: `**Analyze and expand the user's input into a detailed, creative, and specific description suitable for generating a simple, animated doodle GIF.**
- **Identify Key Elements:** Break down the input into its core subject, attributes (colors, textures, clothing, etc.), and any specified action.
- **Add Specificity:** If the description is vague (e.g., "a cat"), enrich it with specific, visually interesting details (e.g., "a fluffy, ginger tabby cat with a mischievous grin").
- **Ensure Visual Clarity:** Describe the scene in a way that is easy to translate into a simple doodle. Focus on clear outlines and a primary action.
- **Maintain a Positive Tone:** Keep the description lighthearted and playful.
- **Output:** Provide only the expanded, detailed description as a single string of text.`,
      },
    });

    const expandedPrompt = expandPromptResponse.text;
    updateStatus(`Generating ${numFrames} frames... this may take a moment.`);
    
    const imageGenPrompt = `A sequence of ${numFrames} animation frames for a GIF. It's a simple, vibrant, hand-drawn doodle sketch on a plain solid white background. The animation should have subtle, fluid motion. The subject is: ${expandedPrompt}. The image must be square. There should be no background elements or black bars.`;

    const response = await ai.models.generateImages({
        model: 'imagen-3.0-generate-002',
        prompt: imageGenPrompt,
        config: {numberOfImages: numFrames, outputMimeType: 'image/png'},
    });
    
    if (!response.generatedImages || response.generatedImages.length === 0) {
        throw new Error("The model failed to generate any images. Please try a different prompt.");
    }
    
    updateStatus('Processing generated frames...');
    const images: string[] = [];
    let frameCount = 0;

    for (const generatedImage of response.generatedImages) {
        frameCount++;
        updateStatus(`Processing frame ${frameCount} of ${response.generatedImages.length}`);
        
        const base64ImageBytes = generatedImage.image.imageBytes;
        const src = `data:image/png;base64,${base64ImageBytes}`;
        images.push(src);

        const frameElement = document.createElement('div');
        frameElement.className = 'frame';
        const frameNumber = document.createElement('div');
        frameNumber.className = 'frame-number';
        frameNumber.textContent = frameCount.toString();
        frameElement.appendChild(frameNumber);
        const img = document.createElement('img');
        img.width = 1024;
        img.height = 1024;
        img.src = src;
        frameElement.appendChild(img);
        framesContainer.appendChild(frameElement);

        setTimeout(() => {
          frameElement.classList.add('appear');
        }, 50 * frameCount);
    }

    if (frameCount < 2) {
      updateStatus('Failed to generate enough frames. Try another prompt.');
      return false;
    }

    updateStatus('Creating your magical GIF...');

    const img = await createGifFromPngs(images);
    img.className = 'result-image';

    if (resultContainer) {
      resultContainer.appendChild(img);
      const downloadButton = document.createElement('button');
      downloadButton.className = 'download-button';
      const icon = document.createElement('i');
      icon.className = 'fas fa-download';
      downloadButton.appendChild(icon);
      downloadButton.onclick = () => {
        const a = document.createElement('a') as HTMLAnchorElement;
        a.href = img.src;
        a.download = 'magical-animation.gif';
        a.click();
      };
      resultContainer.appendChild(downloadButton);

      switchTab('output');
      setTimeout(() => {
        resultContainer.classList.add('appear');
        generationContainer.scrollIntoView({behavior: 'smooth'});
      }, 50);
    }

    updateStatus('Done!');
  } catch (error) {
    console.error('Error generating animation:', error);
    const message = error instanceof Error ? error.message : String(error);
    updateStatus(`Error: ${message}`);
    return false;
  } finally {
    generateButton.classList.remove('loading');
    updateUI();
  }
  return true;
}

// --- Initialize the app ---
function main() {
  updateUI();

  getCreditsButton.addEventListener('click', () => {
    creditManager.add(FREE_CREDITS_AMOUNT);
    updateStatus(`You found ${FREE_CREDITS_AMOUNT} free credits!`);
    if (currencyWidget) {
      currencyWidget.classList.add('flash');
      setTimeout(() => {
        currencyWidget.classList.remove('flash');
      }, 500);
    }
  });

  generateButton.addEventListener('click', async () => {
    const value = promptInput.value.trim();
    if (!value) return;

    if (creditManager.get() < COST_PER_GENERATION) {
      if (currencyWidget) {
        currencyWidget.classList.remove('shake'); // reset animation
        void currencyWidget.offsetWidth; // trigger reflow
        currencyWidget.classList.add('shake');
      }
      updateUI();
      return;
    }

    creditManager.spend(COST_PER_GENERATION);

    for (let i = 0; i < RETRY_COUNT; i++) {
      if (await run(value)) {
        console.log('Done.');
        return;
      } else {
        console.log(`Run failed. Retrying... (${i + 1}/${RETRY_COUNT})`);
        updateStatus(`Run failed. Retrying... (${i + 1}/${RETRY_COUNT})`);
      }
    }
    console.log('Giving up after multiple retries. :(');
    updateStatus('Failed to generate animation after multiple attempts. Please try a different prompt.');
  });

  promptInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      generateButton?.click();
    }
  });

  promptInput.addEventListener('focus', () => {
    promptInput.select();
  });

  tabButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const targetTab = button.getAttribute('data-tab');
      if (targetTab) switchTab(targetTab);
    });
  });

  switchTab('frames');
}

main();
